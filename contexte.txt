2.1 Cohérence concurrente et synchronisation
— Quels types de problèmes de concurrence peuvent apparaître dans ce système multi-clients ?

Des accès concurrents aux mêmes canaux ou structures partagées peuvent provoquer des états incohérents.

— Que peut-il arriver si deux clients rejoignent ou quittent un canal en même temps ?

Il peut y avoir des conflits : un canal supprimé alors qu’un client essaie d’y entrer, ou des erreurs de comptage.

— Votre système est-il vulnérable aux incohérences d’état ou aux conditions de course ? Comment s’en prémunir ?

Oui, mais un verrou est déjà utilisé pour éviter les accès concurrents. Il limite les risques de conditions de course.

2.2 Modularité et séparation des responsabilités
— Quelles sont les grandes responsabilités fonctionnelles de votre application serveur (gestion client, traitement commande, envoi message, logs, persistance…) ?

Il y a la gestion des connexions, le traitement des commandes, l’envoi de messages, l’écriture dans les logs et la sauvegarde.

— Peut-on tracer une frontière claire entre logique métier et logique d’entrée/sortie réseau ?

Pas encore. La logique métier est souvent mélangée aux fonctions d’E/S, il faudrait mieux séparer les couches.

— En cas d’erreur dans une commande, quelle couche doit réagir ?

La logique métier doit la détecter, mais c’est la couche protocole qui doit formuler une réponse claire au client.

2.3 Scalabilité et capacité à évoluer
— Si vous deviez ajouter une nouvelle commande (ex : /topic, /invite, /ban), quelle partie du système est concernée ?

Il faudrait modifier le parser de commandes, la logique métier, et parfois l’état du serveur (ex: pour le topic).

— Que faudrait-il pour que ce serveur fonctionne à grande échelle (plusieurs centaines de clients) ?

Il faudrait gérer les connexions en asynchrone, utiliser un système de files de messages et répartir la charge.

— Quelles limitations structurelles du code actuel empêchent une montée en charge ?

Le code est synchrone, tout passe par un seul thread, et l’état est en mémoire locale.

2.4 Portabilité de l’architecture
— Ce serveur TCP pourrait-il être adapté en serveur HTTP ? Quelles parties seraient conservées, quelles parties changeraient ?

La logique métier pourrait rester, mais toute la gestion du protocole, parsing, et communication réseau devrait changer.

— Dans une perspective micro-services, quels modules seraient candidats naturels pour devenir des services indépendants ?

La gestion des utilisateurs, la gestion des canaux, et la messagerie pourraient facilement être séparées.

— Est-il envisageable de découpler la gestion des utilisateurs de celle des canaux ? Comment ?

Oui, en créant un service "utilisateur" avec son propre état, et un autre pour les canaux qui ferait appel à lui via une API interne.

2.5 Fiabilité, tolérance aux erreurs, robustesse
— Le serveur sait-il détecter une déconnexion brutale d’un client ? Peut-il s’en remettre ?

Le serveur ne détecte pas activement une déconnexion "prolongée". Il se rend compte qu’un client est parti seulement lorsqu'une lecture échoue (readline() retourne vide), pas sur timeout ni ping. Il ne surveille pas passivement les connexions.
Faudrait faire comme dans les jeux en ligne, le serveur échange en continu avec le client et, en cas d'absence de réponse prolongée, il le considère comme déconnecté et applique les corrections appropriées.

— Si un message ne peut pas être livré à un client (socket cassée), le système le détecte-t-il ?

Il faudrait vérifier explicitement les erreurs d’écriture.

— Peut-on garantir une livraison ou au moins une trace fiable de ce qui a été tenté/envoyé ?

Le code ignore silencieusement les erreurs d’écriture (try/except: continue) lors de l'envoi des messages. Actuellement, le système ne réagit pas du tout à une socket cassée.
Il faudrait ajouter un journal d’événements ou un système de log transactionnel.

2.6 Protocole : structuration et évolutivité
— Quelles sont les règles implicites du protocole que vous utilisez ? Une ligne = une commande, avec un préfixe (/msg, /join, etc.) et éventuellement des arguments : est-ce un protocole explicite, documenté, formalisé ?

Non, ce sont juste des conventions implicites. Rien n’est documenté ni formalisé.

— Le protocole est-il robuste ? Que se passe-t-il si un utilisateur envoie /msg sans texte ? Ou un /join avec un nom de canal invalide ?

Non, le protocole n’est pas totalement robuste.
Un /msg sans texte envoie un message vide, et un /join avec un nom invalide est accepté sans vérification.

— Peut-on imaginer une spécification formelle de ce protocole ? Un mini-ABNF, une doc à destination des développeurs de client ?

Oui, ce serait une bonne amélioration : une grammaire simple, des types d’erreurs identifiables, et une doc claire.

— Quelle serait la différence structurelle entre ce protocole et un protocole REST ou HTTP ?

Ce protocole est orienté texte et temps réel, sans structure standard. REST est plus formalisé, basé sur des ressources et stateless.

